//---------------------------------------------------------------------------

#pragma hdrstop

#include "ConjuntoL.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
ConjuntoL::ConjuntoL()
{
    elem = new ListaP();
};
bool ConjuntoL::vacio()
{
    return elem->longitud() == 0;
};
bool ConjuntoL::pertenece(int e)
{
    if (!elem->vacia()) {
        NodoL* p = elem->primero();
        while (p != NULL) {
            int ele = elem->recupera(p);
            if (e == ele)
                return true;
            p = elem->siguiente(p);
        }
        return false;
    } else {
        cout << "ERROR CONJUNTO SIN ELEMENTOS\n";
        return false;
    }
};
void ConjuntoL::inserta(int e)
{
    if (vacio())
        elem->inserta(elem->primero(), e);
    else if (!pertenece(e))
        elem->inserta(elem->primero(), e);
};
int ConjuntoL::cardinal()
{
    return elem->longitud();
};

int ConjuntoL::ordinal(int e)
{
    if (!elem->vacia()) {
        int cont = 0;
		NodoL* p = elem->primero();
		while (p != NULL) {
			cont += 1;
            int ele = elem->recupera(p);
            if (e == ele) {
                return cont;
            }
            p = elem->siguiente(p);
        }
    } else {
        cout << "Conjunto no tiene elementos" << endl;
    }
};
void ConjuntoL::suprime(int e)
{
    if (pertenece(e)) {
        int dir = -1;
        NodoL* p = elem->primero();
        while (p != -1) {
            int ele = elem->recupera(p);
            if (p == ele) {
                return dir = p;
            }
            p = elem->siguiente(p);
        }
    } else {
        cout << "Conjunto no  dicho elemento" << endl;
    }
};
int ConjuntoL::muestrea()
{
    int lug = 2;
    int dir = elem->primero();
    int direlem = -1;
    int cont = 0;

    for (int i = 0; i < elem->longitud(); i++) {
        cont += 1;
        if (cont == lug)
            direlem = dir;
        dir = elem->siguiente(direlem);
    }

    return elem->recupera(direlem);
};

